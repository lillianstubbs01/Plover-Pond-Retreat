{"ast":null,"code":"import { serialize, compile, middleware, prefixer, stringify, rulesheet } from 'stylis';\nimport { cssifyObject } from './utils/cssifyObject.esm.js';\nfunction compileKeyframeRule(keyframeObject) {\n  let css = '';\n  // eslint-disable-next-line guard-for-in\n  for (const percentage in keyframeObject) {\n    css += `${percentage}{${cssifyObject(keyframeObject[percentage])}}`;\n  }\n  return css;\n}\n/**\r\n * Creates CSS rules for insertion from passed CSS.\r\n */\nfunction compileKeyframesCSS(keyframeName, keyframeCSS) {\n  const cssRule = `@keyframes ${keyframeName} {${keyframeCSS}}`;\n  const rules = [];\n  serialize(compile(cssRule), middleware([prefixer, stringify,\n  // ðŸ’¡ we are using `.insertRule()` API for DOM operations, which does not support\n  // insertion of multiple CSS rules in a single call. `rulesheet` plugin extracts\n  // individual rules to be used with this API\n  rulesheet(rule => rules.push(rule))]));\n  return rules;\n}\nexport { compileKeyframeRule, compileKeyframesCSS };","map":{"version":3,"names":["compileKeyframeRule","keyframeObject","css","percentage","cssifyObject","compileKeyframesCSS","keyframeName","keyframeCSS","cssRule","rules","serialize","compile","middleware","prefixer","stringify","rulesheet","rule","push"],"sources":["C:\\Users\\lilli\\Phpstorm\\Plover-Pond-Retreat\\plover-pond-retreat\\packages\\core\\src\\runtime\\compileKeyframeCSS.ts"],"sourcesContent":["import { GriffelAnimation } from '../types';\nimport { compile, middleware, serialize, rulesheet, stringify, prefixer } from 'stylis';\nimport { cssifyObject } from './utils/cssifyObject';\n\nexport function compileKeyframeRule(keyframeObject: GriffelAnimation): string {\n  let css = '';\n\n  // eslint-disable-next-line guard-for-in\n  for (const percentage in keyframeObject) {\n    css += `${percentage}{${cssifyObject(keyframeObject[percentage])}}`;\n  }\n\n  return css;\n}\n\n/**\n * Creates CSS rules for insertion from passed CSS.\n */\nexport function compileKeyframesCSS(keyframeName: string, keyframeCSS: string): string[] {\n  const cssRule = `@keyframes ${keyframeName} {${keyframeCSS}}`;\n  const rules: string[] = [];\n\n  serialize(\n    compile(cssRule),\n    middleware([\n      prefixer,\n      stringify,\n\n      // ðŸ’¡ we are using `.insertRule()` API for DOM operations, which does not support\n      // insertion of multiple CSS rules in a single call. `rulesheet` plugin extracts\n      // individual rules to be used with this API\n      rulesheet(rule => rules.push(rule)),\n    ]),\n  );\n\n  return rules;\n}\n"],"mappings":";;SAIgBA,mBAAmBA,CAACC,cAAgC;EAClE,IAAIC,GAAG,GAAG,EAAE;;EAGZ,KAAK,MAAMC,UAAU,IAAIF,cAAc,EAAE;IACvCC,GAAG,OAAOC,UAAA,IAAcC,YAAY,CAACH,cAAc,CAACE,UAAU,CAAC,IAAI;;EAGrE,OAAOD,GAAG;AACZ;AAEA;;;SAGgBG,mBAAmBA,CAACC,YAAoB,EAAEC,WAAmB;EAC3E,MAAMC,OAAO,iBAAiBF,YAAA,KAAiBC,WAAA,GAAc;EAC7D,MAAME,KAAK,GAAa,EAAE;EAE1BC,SAAS,CACPC,OAAO,CAACH,OAAO,CAAC,EAChBI,UAAU,CAAC,CACTC,QAAQ,EACRC,SAAS;;;;EAKTC,SAAS,CAACC,IAAI,IAAIP,KAAK,CAACQ,IAAI,CAACD,IAAI,CAAC,CAAC,CACpC,CAAC,CACH;EAED,OAAOP,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}